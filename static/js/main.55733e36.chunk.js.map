{"version":3,"sources":["widget.jsx","modal.jsx","App.js","serviceWorker.js","index.js"],"names":["value","setValue","limits","MAX","MIN","useState","focus","setFocus","clickHandler","target","Number","onWheel","e","deltaY","htmlFor","className","onBlur","onFocus","max","min","onChange","type","name","id","IconButton","onClick","color","props","buttonLabel","modal","setModal","toggle","Button","Modal","isOpen","ModalHeader","ModalBody","Limits","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAKe,cAA+B,IAA7BA,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,OACzBC,EAAYD,EAAZC,IAAKC,EAAOF,EAAPE,IAD+B,EAGjBC,oBAAS,GAHQ,mBAGpCC,EAHoC,KAG7BC,EAH6B,KAKrCC,EAAe,SAACC,GACR,MAATA,GAAgBT,EAAQ,GAAKG,EAC9BF,EAASS,OAAOV,GAAS,GACP,MAATS,GAAgBT,EAAQ,GAAKI,GACtCH,EAASS,OAAOV,GAAS,IAa7B,OACE,yBAAKW,QAVc,SAACC,GACpB,IAAMH,GAAUG,EAAEC,OACfP,GAASG,EAAS,GAAKT,EAAQ,GAAKG,EACrCF,EAASS,OAAOV,GAAS,GAChBM,GAASG,EAAS,GAAKT,EAAQ,GAAKI,GAC7CH,EAASS,OAAOV,GAAS,KAMzB,iCACE,6BACE,2BAAOc,QAAQ,QAAf,6EACA,2BAAOC,UAAU,QAAQC,OAAQ,kBAAIT,GAAS,IAAQU,QAAS,kBAAIV,GAAS,IAAOW,IAAKf,EAAKgB,IAAKf,EAAKJ,MAAOU,OAAOV,GAAQoB,SAAU,SAACR,GAAD,OAAKX,EAASW,EAAEH,OAAOT,QAAQqB,KAAK,SAASC,KAAK,OAAOC,GAAG,UAErM,kBAACC,EAAA,EAAD,CAAYC,QAAS,kBAAIjB,EAAa,MAAMkB,MAAM,WAChD,kBAAC,IAAD,OAEF,kBAACF,EAAA,EAAD,CAAYC,QAAS,kBAAIjB,EAAa,MAAMkB,MAAM,aAChD,kBAAC,IAAD,U,gCClCK,WAACC,GAAW,IAEvBC,EAGED,EAHFC,YACAb,EAEEY,EAFFZ,UACAb,EACEyB,EADFzB,OAJsB,EAOEG,oBAAS,GAPX,mBAOjBwB,EAPiB,KAOVC,EAPU,OAQEzB,mBAAS,GARX,mBAQjBL,EARiB,KAQVC,EARU,KAUlB8B,EAAS,kBAAMD,GAAUD,IAE/B,OACE,6BACE,kBAACG,EAAA,EAAD,CAAQN,MAAM,UAAUD,QAASM,GAASH,GAC1C,kBAACK,EAAA,EAAD,CAAOC,OAAQL,EAAOE,OAAQA,EAAQhB,UAAWA,GAC/C,kBAACoB,EAAA,EAAD,CAAaJ,OAAQA,GAArB,aACA,kBAACK,EAAA,EAAD,KACE,kBAAC,EAAD,CACApC,MAAOA,EACPC,SAAUA,EACVC,OAAQA,QCrBZmC,EAAS,CACbjC,IAAK,EACLD,IAAK,IAWQmC,EARH,SAACX,GACX,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAOb,OAAQmC,EAAQT,YAAW,aCApBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.55733e36.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport default ({value, setValue, limits})=> {\n  const {MAX, MIN} = limits;\n\n  const [focus, setFocus] = useState(false);\n\n  const clickHandler = (target) => {    \n    if(target===\"+\" && value + 1 <= MAX){\n      setValue(Number(value) + 1);      \n    } else if (target===\"-\" && value - 1 >= MIN) {\n      setValue(Number(value) - 1);\n    }\n  };\n\n  const wheelHandler = (e) => {\n    const target = -e.deltaY;    \n    if(focus && target > 0 && value + 1 <= MAX){\n      setValue(Number(value) + 1);\n    } else if (focus && target < 0 && value - 1 >= MIN) {\n      setValue(Number(value) - 1);\n    }    \n  };\n\n  return (\n    <div onWheel={wheelHandler}>      \n      <section>\n        <div>\n          <label htmlFor=\"name\">Введите число</label>\n          <input className=\"input\" onBlur={()=>setFocus(false)} onFocus={()=>setFocus(true)} max={MAX} min={MIN} value={Number(value)} onChange={(e)=>setValue(e.target.value)} type=\"number\" name=\"name\" id=\"name\"/>\n        </div>            \n        <IconButton onClick={()=>clickHandler(\"+\")} color=\"primary\">\n          <AddCircleOutlineIcon />\n        </IconButton>\n        <IconButton onClick={()=>clickHandler(\"-\")} color=\"secondary\">\n          <RemoveCircleOutlineIcon />\n        </IconButton>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport Widget from './widget';\nimport { Button, Modal, ModalHeader, ModalBody} from 'reactstrap';\n\nexport default (props) => {\n  const {\n    buttonLabel,\n    className,\n    limits\n  } = props;\n\n  const [modal, setModal] = useState(false);\n  const [value, setValue] = useState(0);\n\n  const toggle = () => setModal(!modal);\n\n  return (\n    <div>\n      <Button color=\"success\" onClick={toggle}>{buttonLabel}</Button>\n      <Modal isOpen={modal} toggle={toggle} className={className}>\n        <ModalHeader toggle={toggle}>Dom Click</ModalHeader>\n        <ModalBody>\n          <Widget \n          value={value}\n          setValue={setValue}\n          limits={limits}/>\n        </ModalBody>        \n      </Modal>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Modal from './modal';\n\nconst Limits = {\n  MIN: 0,\n  MAX: 10,\n};\n\nconst App = (props) => {  \n  return (\n    <div className=\"App\">      \n      <Modal limits={Limits} buttonLabel={`Widget`}/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <>\n    <App/>\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}